name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'week08aks'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'week08rg'
      aks_acr_name:
        description: 'SHORT name of ACR (no .azurecr.io)'
        required: true
        default: 'week08azurecontainer'
      k8s_namespace:
        description: 'Namespace to deploy into'
        required: false
        default: 'default'
      product_service_name:
        description: 'K8s Service name for product'
        required: false
        default: 'product-service-w08e1'
      order_service_name:
        description: 'K8s Service name for order'
        required: false
        default: 'order-service-w08e1'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Debug inputs & Azure account
        run: |
          echo "AKS: ${{ github.event.inputs.aks_cluster_name }}"
          echo "RG:  ${{ github.event.inputs.aks_resource_group }}"
          echo "ACR: ${{ github.event.inputs.aks_acr_name }}"
          echo "NS:  ${{ github.event.inputs.k8s_namespace }}"
          echo "--- az account show ---"
          az account show
          echo "--- ACRs visible in this subscription ---"
          az acr list -o table

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group ${{ github.event.inputs.aks_resource_group }} \
            --name ${{ github.event.inputs.aks_cluster_name }} \
            --overwrite-existing

      - name: Ensure namespace exists
        run: |
          NS="${{ github.event.inputs.k8s_namespace }}"
          kubectl get ns "$NS" >/dev/null 2>&1 || kubectl create ns "$NS"

      - name: Attach ACR (resolve by resource ID)
        run: |
          ACR_ID=$(az acr show --name ${{ github.event.inputs.aks_acr_name }} --query id -o tsv)
          echo "Resolved ACR_ID: $ACR_ID"
          az aks update \
            --name ${{ github.event.inputs.aks_cluster_name }} \
            --resource-group ${{ github.event.inputs.aks_resource_group }} \
            --attach-acr "$ACR_ID"

      - name: Deploy Backend Infrastructure (ConfigMaps, Secrets, DBs)
        run: |
          cd k8s/
          kubectl apply -n ${{ github.event.inputs.k8s_namespace }} -f configmaps.yaml
          kubectl apply -n ${{ github.event.inputs.k8s_namespace }} -f secrets.yaml
          kubectl apply -n ${{ github.event.inputs.k8s_namespace }} -f product-db.yaml
          kubectl apply -n ${{ github.event.inputs.k8s_namespace }} -f order-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          cd k8s/
          kubectl apply -n ${{ github.event.inputs.k8s_namespace }} -f product-service.yaml
          kubectl apply -n ${{ github.event.inputs.k8s_namespace }} -f order-service.yaml
          kubectl rollout status -n ${{ github.event.inputs.k8s_namespace }} deploy/product-service --timeout=120s || true
          kubectl rollout status -n ${{ github.event.inputs.k8s_namespace }} deploy/order-service   --timeout=120s || true

      - name: Wait for Backend LoadBalancer IPs
        env:
          NS: ${{ github.event.inputs.k8s_namespace }}
          PRODUCT_SVC: ${{ github.event.inputs.product_service_name }}
          ORDER_SVC:   ${{ github.event.inputs.order_service_name }}
        run: |
          echo "Waiting for Product & Order LoadBalancer IPs (up to 5 minutes)..."
          for i in $(seq 1 60); do
            echo "Attempt $i/60"
            PRODUCT_IP=$(kubectl get svc "$PRODUCT_SVC" -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            ORDER_IP=$(kubectl  get svc "$ORDER_SVC"  -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "Product: $PRODUCT_IP | Order: $ORDER_IP"
              break
            fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Timeout: could not get all IPs."
            kubectl get svc -n "$NS" -o wide
            exit 1
          fi
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP"   >> $GITHUB_ENV

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        if: always()
        run: az logout
